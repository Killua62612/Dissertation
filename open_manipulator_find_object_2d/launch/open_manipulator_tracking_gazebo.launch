<launch>
  <!-- These are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="gui" default="true"/>
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!--<arg name="world_name" value="$(find open_manipulator_gazebo)/worlds/empty.world"/>-->
    <arg name="world_name" value="$(find open_manipulator_find_object_2d)/worlds/tracking.world"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <!--<include file="$(find open_manipulator_description)/launch/open_manipulator_upload.launch"/>-->
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find franka_description)/robots/panda_arm_hand.urdf.xacro" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
     args="-urdf -model-z 0.0 -param robot_description"/>
  
  <!-- Run controller utils -->
  <include file="$(find open_manipulator_gazebo)/launch/controller_utils.launch"/>

  <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find panda_simulation)/config/panda_control.yaml" command="load" />

  <!-- launch robot control node for moveit motion planning -->
    <node pkg="panda_simulation" type="robot_control_node" name="robot_control_node" output="screen" />

  <!-- ros_control robotis manipulator launch file -->
  <include file="$(find open_manipulator_gazebo)/launch/open_manipulator_controller.launch"/>
</launch>
